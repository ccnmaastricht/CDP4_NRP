'''
Evaluate performance of saccade generator controlling eye-movement of single
for one direction (e.g. left or right)

:license: CC BY-NC-SA 4.0, see LICENSE.md
'''

from saccade_generator_single_side import saccade_generator_single_side
from helpers.i_o_scripts import saccadic_size_single_side
from helpers.i_o_scripts import stim_amp

import nest
import numpy as np
from matplotlib import pyplot as plt

'''
Test functionality of saccade generator for eye movement in single direction
'''

N_vp = 2
msd = 1234

# Set up nest kernel
nest.ResetKernel()

nest.SetKernelStatus({'local_num_threads' : N_vp})
pyrngs = [np.random.RandomState(s) for s in range(msd, msd+N_vp)]
nest.SetKernelStatus({'rng_seeds' : range(msd+N_vp+1, msd+2*N_vp+1)})

# Set stimulus parameters
stim_times = np.asarray([2000., 2400., 3200., 3700., 4200., 4600, 5200., 5500.,
                        6000., 6400., 6900., 7400., 7900., 8500., 9100.])
stim_sizes = np.asarray([0.43, 0.61, 0.52, 0.12, 0.3, 0., 0.5, 0.7, 0.1, 0.4,
                         0.6, 0.31, 0.45, 0.31, 0.92])

# Determine stimulus amplitudes
num_stims = len(stim_times)

stim_amplitudes = [stim_amp(stim_sizes[i], 1.) for i in
                   range(num_stims)]

stim_duration = 75.

stim_dict_template = {'amplitude' : 0.,
                      'start' : 0.,
                      'stop' : 0.}

stim_dict = []

for i, stim_val in enumerate(stim_amplitudes):
    stim_dict.append(stim_dict_template.copy())

    stim_dict[-1]['amplitude'] = stim_val
    stim_dict[-1]['start'] = stim_times[i]
    stim_dict[-1]['stop'] = stim_times[i] + stim_duration


# Create saccade generator
LLBN, EBN, IBN, OPN = saccade_generator_single_side()

# Create and connect devices
stimuli = nest.Create('dc_generator', num_stims)
nest.SetStatus(stimuli, stim_dict)
spike_detector = nest.Create('spike_detector', 1)

nest.Connect(stimuli, LLBN, 'all_to_all')
nest.Connect(EBN, spike_detector)


spike_detector = nest.Create('spike_detector', 1)
names = ['LLBN', 'EBN', 'IBN', 'OPN']

nest.Connect(EBN, spike_detector)

nest.Simulate(stim_times[-1] + 400.)

# Evaluate performance of spiking saccade generator
spike_times = nest.GetStatus(spike_detector, 'events')[0]['times']

saccadic_sizes = saccadic_size_single_side(stim_times, spike_times)

error = stim_sizes - saccadic_sizes
mse = np.sqrt((error**2).mean())

# Plot results
plt.figure()
plt.title(f'Evaluation of saccade generation, RMSE : {mse}')
plt.plot(stim_times, stim_sizes, label = 'Target displacement')
plt.plot(stim_times, saccadic_sizes, label = 'Displacement generated by saccade generator')
plt.xlabel('Time [ms]')
plt.ylabel('Relative displacement')
plt.legend()

plt.show()
